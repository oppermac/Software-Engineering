//This test Class will test the implementation of the DAG Class.

import static org.junit.Assert.*;

import org.junit.Test;

public class DAGTest {

	@Test
	public void testDAG()
	{
		DAG graph = new DAG(10);
		
		graph.addEdge(1, 2);
		graph.addEdge(2, 4);
		graph.addEdge(2, 5);
		graph.addEdge(4, 6);
		graph.addEdge(4, 7);
		
		assertEquals(1, graph.indegree(4));
		assertEquals(2, graph.outdegree(4));
		assertEquals(5, graph.E());
		assertEquals(10, graph.V());
		String adjacent = "[6, 7]";
		assertEquals(adjacent, graph.adjacent(4).toString());
	}
	
	@Test(expected=Exception.class)
	public void exceptionTest(){
		
		//Can't make a DAG with less than 0 vertices 
		
		DAG graph = new DAG(-5); //will return "Please enter numbers between 0 and 4"
	}
	
	@Test
	public void addEdgeTest()
	{
		DAG graph = new DAG(5);
		
		graph.addEdge(1,2);

		//As these are negative, the program will print a system error and not addEdge
		graph.addEdge(-1, -6);
		
		//This will not work as 12 > 5
		graph.addEdge(3, 12);
		
		assertEquals(1, graph.E());
	}
	
	@Test
	public void indegreeTest()
	{
		DAG graph = new DAG(5);
		
		graph.addEdge(1, 2);
		graph.addEdge(2, 4);
		graph.addEdge(3, 3);
		
		assertEquals(1, graph.indegree(3));
	
		assertEquals(-1, graph.indegree(5));
	}
	
	@Test
	public void outdegreeTest()
	{
		DAG graph = new DAG(5);
		
		graph.addEdge(1, 2);
		graph.addEdge(2, 4);
		graph.addEdge(3, 3);
		
		assertEquals(1, graph.outdegree(3));
	
		assertEquals(-1, graph.outdegree(5));
	}
	
	@Test 
	public void vTest()
	{
		DAG graph = new DAG(6);
		assertEquals(6, graph.V());
	}
	
	@Test
	public void eTest(){
		
		DAG graph = new DAG(5);
		
		graph.addEdge(1, 2);
		graph.addEdge(2, 4);
		graph.addEdge(3, 3);
		
		assertEquals(3, graph.E());
	}
	
	@Test
	public void adjacentTest()
	{
		DAG graph = new DAG(5);
		
		graph.addEdge(1, 2);
		graph.addEdge(2, 4);
		graph.addEdge(3, 3);
		graph.addEdge(4, 3);
		
		String adjacent = "[4]";
		assertEquals(adjacent, graph.adjacent(2).toString());
	}
	
	@Test
	public void forCycleTest()
	{
		DAG graph = new DAG(10);
		
		graph.addEdge(0, 1);
		graph.addEdge(1, 2);
		graph.addEdge(2, 0);
		graph.addEdge(2, 3);
		graph.addEdge(3, 4);
		
		graph.findCycle(0);
		
		assertTrue(graph.hasCycle());
	}
	
	@Test
	public void acyclicGraphTest()
	{
		DAG graph = new DAG(10);
		
		graph.addEdge(1, 2);
		graph.addEdge(2, 4);
		graph.addEdge(3, 3);
		
		graph.findCycle(1);
		assertFalse(graph.hasCycle());
	}
	
	@Test
	public void LCATest()
	{
		DAG graph = new DAG(10);
		
		graph.addEdge(0, 1);
		graph.addEdge(1, 3);
		graph.addEdge(1, 2);
		graph.addEdge(3, 4);
		graph.addEdge(2, 5);
		graph.addEdge(5, 6);
		graph.addEdge(4, 6);
		graph.addEdge(6, 7);
		graph.addEdge(4, 8);
		graph.addEdge(8, 7);
		
		assertEquals(1, graph.findLCA(4, 5));
		assertEquals(8, graph.findLCA(7, 8));
		assertEquals(6, graph.findLCA(6, 7));
	}
	
	@Test
	public void LCAforNoCommonAncestorsTest()
	{
		DAG graph = new DAG(10);
		graph.addEdge(0, 1);
		graph.addEdge(0, 3);
		graph.addEdge(1, 3);
		graph.addEdge(3, 2);
		graph.addEdge(2, 4);
		graph.addEdge(1, 5);
		graph.addEdge(2, 5);
		
		//Checks to see if LCA function works
		assertEquals(0, graph.findLCA(2, 1));
		assertEquals(3, graph.findLCA(2, 3));
		assertEquals(2, graph.findLCA(4, 5));
		
		//Checks for absent vertex
		assertEquals(-1, graph.findLCA(8, 2));
		
		//Checks for negative vertex
		assertEquals(-1, graph.findLCA(-2, 3));
		assertEquals(-1, graph.findLCA(3, -2));
		assertEquals(-1, graph.findLCA(-2, -3));
	}
	
	@Test
	public void LCAForNonDAGTest()
	{
		DAG graph = new DAG(10);
		
		graph.addEdge(0, 1);
		graph.addEdge(0, 3);
		graph.addEdge(3, 2);
		graph.addEdge(2, 0);
		graph.addEdge(2, 4);
		
		assertEquals(-1, graph.findLCA(3, 2));
		assertEquals(-1, graph.findLCA(2, 4));
		assertEquals(-1, graph.findLCA(1, 3));
		assertEquals(-1, graph.findLCA(0, 3));
		assertEquals(-1, graph.findLCA(1, 2));
		
	}
	
	@Test
	public void LCAForSameVertexTest()
	{
		DAG graph = new DAG(10);
		
		graph.addEdge(0, 1);
		graph.addEdge(0, 3);
		graph.addEdge(1, 3);
		
		assertEquals(3, graph.findLCA(3, 3));
		
	}
	
	@Test
	public void LCAForEmptyDAGTest()
	{
		DAG graph = new DAG(5);
		assertEquals(-1, graph.findLCA(0, 2));
		assertEquals(-1, graph.findLCA(0, 4));
		assertEquals(-1, graph.findLCA(0, 0));
	}
	
}
